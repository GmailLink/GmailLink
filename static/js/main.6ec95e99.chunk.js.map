{"version":3,"sources":["images/gmailLogo.ico","components/Email/EmailInstructions.jsx","components/Email/index.js","components/Ads/index.js","components/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmailInstructions","getEmojie","emojie","role","aria-label","className","isMobVal","isMobile","style","backgroundImage","backgroundRepeat","backgroundPositionX","backgroundSize","WebkitBackgroundSize","MozBackgroundSize","OBackgroundSize","textAlign","position","height","width","left","top","listStyle","padding","this","React","Component","EmailLink","props","getSharableLink","messageId","state","encodeURIComponent","trim","validate","values","errors","email","onSubmit","a","console","log","copyMailText","document","getElementById","value","select","execCommand","setState","copySuccess","handleChange","event","msgId","target","submitAction","openMailLink","mailText","window","open","isMobileValue","CssBaseline","render","handleSubmit","form","submitting","pristine","onChange","Paper","Grid","container","spacing","item","alignItems","xs","name","fullWidth","required","component","TextField","type","label","autoComplete","Button","onClick","variant","color","disabled","reset","marginLeft","fontFamily","listStyleType","id","defaultValue","AdComponent","isMobileStatus","async","src","display","data-ad-client","data-ad-slot","data-ad-format","innerWidth","MailComponent","App","canSubmit","Navbar","dark","NavbarBrand","href","logo","alt","Jumbotron","marginBottom","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ec95e99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gmailLogo.82d5fafd.ico\";","import React from \"react\";\nimport \"./EmailInstructions.css\";\nimport { isMobile } from \"..\";\n\nexport default class EmailInstructions extends React.Component {\n  getEmojie = (emojie = \"ðŸ‘‰\") => {\n    return (\n      <span role=\"img\" aria-label=\"arrow\" className=\"padding-right-2\">\n        {emojie}\n      </span>\n    );\n  };\n\n  render() {\n    const isMobVal = isMobile();\n\n    return (\n      <div\n        className={`${isMobVal ? \"instruction-img-mob\" : \"instruction-img\"}`}\n      >\n        <div\n          className={`${\n            isMobVal ? \"background-image-mob\" : \"background-image\"\n          }`}\n          style={{\n            backgroundImage: `url(\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/v2/assets/empty.svg\")`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundPositionX: \"50%\",\n            backgroundSize: `${isMobVal ? \"290px\" : \"317px\"}`,\n            WebkitBackgroundSize: `${isMobVal ? \"290px\" : \"317px\"}`,\n            MozBackgroundSize: `${isMobVal ? \"290px\" : \"317px\"}`,\n            OBackgroundSize: `${isMobVal ? \"290px\" : \"317px\"}`,\n            textAlign: \"center\",\n            position: \"relative\",\n            height: `${isMobVal ? \"200px\" : \"\"}`,\n          }}\n        >\n          <div\n            className={`text-in-circle ${!isMobVal ? \"margin-left-120\" : \"\"}`}\n            style={{\n              height: `${isMobVal ? \"110px\" : \"130px\"}`,\n              width: \"202px\",\n              position: \"absolute\",\n              left: `${isMobVal ? \"78px\" : \"52px\"}`,\n              top: \"29px\",\n            }}\n          >\n            <ul style={{ listStyle: \"none\", padding: 0 }}>\n              <li className=\"padding-bottom-10 font-style-monospace board-header-style\">\n                Instructions\n              </li>\n              <li className=\"text-color-cadetblue font-style-lobster\">\n                {this.getEmojie()} It works only for Gmail Users (Free /\n                Premium).\n              </li>\n              <li className=\"padding-top-5 text-color-beige font-style-lobster\">\n                {this.getEmojie()} Gmail Sharable Link works only if another\n                person there in Mail thread.\n              </li>\n              <li className=\"padding-top-5 text-color-goldenrod font-style-lobster\">\n                {this.getEmojie()}\n                This page will not store any of your data.\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { TextField } from \"final-form-material-ui\";\nimport { Paper, Grid, Button, CssBaseline } from \"@material-ui/core\";\nimport \"./index.css\";\nimport { isMobile } from \"../index\";\nimport EmailInstructions from \"./EmailInstructions\";\n\nexport default class EmailLink extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageId: null,\n      submitAction: false,\n    };\n  }\n\n  getSharableLink = () => {\n    const { messageId } = this.state;\n    const sharableLink = messageId\n      ? `https://mail.google.com/mail/u/0/#search/rfc822msgid%3A${encodeURIComponent(\n          messageId.trim()\n        )}`\n      : null;\n\n    return sharableLink;\n  };\n\n  validate = (values) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email =\n        \"Message ID: Email body > 3-dot Menu > Show Original > Copy Message-ID\";\n    }\n    return errors;\n  };\n\n  onSubmit = async (values) => {\n    console.log(values);\n  };\n\n  copyMailText = () => {\n    let mailText = document.getElementById(\"generatedURL\").value;\n\n    if (mailText !== \"\") {\n      document.getElementById(\"generatedURL\").select();\n      document.execCommand(\"Copy\");\n      this.setState({ copySuccess: \"Copied!\" });\n    }\n  };\n\n  handleChange = (event) => {\n    const msgId = event.target.value;\n    const { messageId } = this.state;\n\n    if (msgId !== messageId) {\n      this.setState({ messageId: msgId.trim(), submitAction: false });\n    }\n  };\n\n  openMailLink = () => {\n    let mailText = document.getElementById(\"generatedURL\").value;\n\n    if (!!mailText) {\n      window.open(mailText);\n    }\n  };\n\n  render() {\n    const { messageId, submitAction } = this.state;\n    const isMobileValue = isMobile();\n\n    return (\n      <div className={`${isMobileValue ? \"columnFlex\" : \"rowFlex\"}`}>\n        <div className=\"emailPage\">\n          <CssBaseline />\n          <Form\n            onSubmit={() => {}}\n            validate={this.validate}\n            render={({ handleSubmit, form, submitting, pristine, values }) => (\n              <form\n                onSubmit={handleSubmit}\n                onChange={(props) => {\n                  this.handleChange(props);\n                }}\n              >\n                <Paper\n                  style={{\n                    padding: 16,\n                    width: isMobileValue ? \"\" : \"600px\",\n                  }}\n                >\n                  <Grid container spacing={2}>\n                    <Grid container item alignItems=\"flex-start\" xs={12}>\n                      <Field\n                        name=\"email\"\n                        fullWidth\n                        required\n                        component={TextField}\n                        type=\"email\"\n                        label=\"Message ID\"\n                        autoComplete=\"off\"\n                      />\n                    </Grid>\n                    <Grid className=\"flexNeed\" item alignItems=\"flex-end\">\n                      <Button\n                        onClick={() => {\n                          const { email: messageId } = values;\n                          this.setState({\n                            messageId,\n                            submitAction: true,\n                            copySuccess: \"\",\n                          });\n                        }}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={submitting || pristine}\n                      >\n                        Submit\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          form.reset();\n                          this.setState({ submitAction: false });\n                        }}\n                        variant=\"contained\"\n                        className=\"padding-left-lg\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={!messageId || pristine}\n                        style={{\n                          marginLeft: isMobileValue ? \"10px\" : \"15px\",\n                        }}\n                      >\n                        Clear\n                      </Button>\n                    </Grid>\n                    {/* Instructions show */}\n                    {!submitAction && !isMobileValue && (\n                      <Grid\n                        container\n                        spacing={2}\n                        style={{ padding: 8, fontFamily: \"monospace\" }}\n                        className=\"color-darkgray\"\n                      >\n                        <span className=\"italic padding-left-10 user-instructions\">\n                          Please follow the Instructions below &nbsp;\n                          <span role=\"img\" aria-label=\"arrow\">\n                            ðŸ‘‡\n                          </span>\n                        </span>\n                        <span>\n                          <ul\n                            style={{\n                              listStyleType: \"disc\",\n                            }}\n                          >\n                            <li>It works only for Gmail Free/Premium Users.</li>\n                            <li>\n                              Gmail Sharable Link works only if another person\n                              there in Mail thread.\n                            </li>\n                            <li>This page will not store any of your data.</li>\n                          </ul>\n                        </span>\n                      </Grid>\n                    )}\n                    {/* Response Stage */}\n                    {messageId && submitAction && !pristine && (\n                      <Grid container spacing={2} style={{ padding: 8 }}>\n                        <Grid item alignItems=\"flex-start\" xs={12}>\n                          <Field\n                            name=\"result\"\n                            id=\"generatedURL\"\n                            fullWidth\n                            component={TextField}\n                            type=\"text\"\n                            defaultValue={this.getSharableLink()}\n                            label=\"Sharable Link\"\n                            autoComplete=\"off\"\n                          />\n                        </Grid>\n                        <Grid item alignItems=\"flex-end\">\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            onClick={this.copyMailText}\n                          >\n                            Copy\n                          </Button>\n                          {!isMobileValue && (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              type=\"submit\"\n                              style={{\n                                marginLeft: isMobileValue ? \"10px\" : \"15px\",\n                              }}\n                              onClick={this.openMailLink}\n                            >\n                              Open Mail Link\n                            </Button>\n                          )}\n                          {this.state.copySuccess ? (\n                            <div\n                              className=\"left-padding\"\n                              style={{ color: \"green\" }}\n                            >\n                              Copied!\n                            </div>\n                          ) : null}\n                        </Grid>\n                      </Grid>\n                    )}\n                  </Grid>\n                </Paper>\n              </form>\n            )}\n          />\n        </div>\n        <EmailInstructions />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Jumbotron } from \"reactstrap\";\nimport \"./index.css\";\nimport { isMobile } from \"../index\";\n\nexport default class AdComponent extends React.Component {\n  render() {\n    const isMobileStatus = isMobile();\n\n    return (\n      <div className={`adGen ${isMobileStatus ? \"adGen-mob\" : \"\"}`}>\n        {/* <Jumbotron> */}\n        <script\n          async\n          src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"\n        ></script>\n        <ins\n          className=\"adsbygoogle\"\n          style={{ display: \"block\" }}\n          data-ad-client=\"ca-pub-8510549292628710\"\n          data-ad-slot=\"8485434580\"\n          data-ad-format=\"auto\"\n        ></ins>\n        <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>\n        {/* </Jumbotron> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport EmailComponent from \"./Email\";\nimport AdComponent from \"./Ads\";\nimport \"./index.css\";\n\nexport const isMobile = () => {\n  if (window.innerWidth <= 760) {\n    return true;\n  }\n  return false;\n};\n\nexport default class MailComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"twoComponents\">\n        <EmailComponent />\n        <AdComponent />\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Jumbotron, Navbar, NavbarBrand } from \"reactstrap\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport MailComponent from \"./components\";\nimport logo from \"./images/gmailLogo.ico\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { canSubmit: false };\n  }\n\n  disableButton() {\n    this.setState({ canSubmit: false });\n  }\n\n  enableButton() {\n    this.setState({ canSubmit: true });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Navbar dark color=\"primary\">\n          <div className=\"container\">\n            <NavbarBrand href=\"https://gmaillink.github.io/\">\n              <img\n                className=\"homepageLogo\"\n                src={logo}\n                alt=\"\"\n                height=\"30px\"\n                width=\"30px\"\n              />\n              Gmail Sharable Link Creator\n            </NavbarBrand>\n          </div>\n        </Navbar>\n\n        <div className=\"emailLinkGen\">\n          <Jumbotron style={{ marginBottom: 0, height: \"95vh\" }}>\n            <MailComponent />\n          </Jumbotron>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}