{"version":3,"sources":["images/suggestions.svg","images/gmailLogo.ico","components/Email/EmailInstructions.jsx","components/Email/index.js","components/Ads/index.js","components/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmailInstructions","getEmojie","emojie","role","aria-label","className","isMobVal","isMobile","style","backgroundImage","mySvg","backgroundRepeat","backgroundSize","WebkitBackgroundSize","MozBackgroundSize","OBackgroundSize","textAlign","position","height","width","React","Component","EmailLink","props","getSharableLink","messageId","state","encodeURIComponent","trim","validate","values","errors","email","onSubmit","a","console","log","copyMailText","document","getElementById","value","select","execCommand","setState","copySuccess","handleChange","event","msgId","target","submitAction","openMailLink","mailText","window","open","this","isMobileValue","CssBaseline","render","handleSubmit","form","submitting","pristine","onChange","Paper","padding","Grid","container","spacing","item","alignItems","xs","name","fullWidth","required","component","TextField","type","label","autoComplete","Button","onClick","variant","color","disabled","reset","marginLeft","fontFamily","listStyleType","id","defaultValue","AdComponent","returnAdsense","async","src","display","data-ad-client","data-ad-slot","data-ad-format","isMobileStatus","innerWidth","MailComponent","App","canSubmit","Navbar","dark","NavbarBrand","href","logo","alt","Jumbotron","marginBottom","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60414f91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/suggestions.c02edc1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmailLogo.82d5fafd.ico\";","import React from \"react\";\nimport \"./EmailInstructions.css\";\nimport { isMobile } from \"..\";\nimport mySvg from \"../../images/suggestions.svg\";\n\nexport default class EmailInstructions extends React.Component {\n  getEmojie = (emojie = \"ðŸ‘‰\") => {\n    return (\n      <span role=\"img\" aria-label=\"arrow\" className=\"padding-right-2\">\n        {emojie}\n      </span>\n    );\n  };\n\n  render() {\n    const isMobVal = isMobile();\n\n    return (\n      <div\n        className={`${isMobVal ? \"instruction-img-mob\" : \"instruction-img\"}`}\n      >\n        <div\n          className={`${\n            isMobVal ? \"background-image-mob\" : \"background-image\"\n          }`}\n          style={{\n            backgroundImage: `url(${mySvg})`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: `${isMobVal ? \"156px 212px\" : \"317px 212px\"}`,\n            WebkitBackgroundSize: `${isMobVal ? \"156px\" : \"317px 212px\"}`,\n            MozBackgroundSize: `${isMobVal ? \"156px\" : \"317px 212px\"}`,\n            OBackgroundSize: `${isMobVal ? \"156px\" : \"317px 212px\"}`,\n            textAlign: \"center\",\n            position: \"relative\",\n            height: `${isMobVal ? \"200px\" : \"212px\"}`,\n            width: `${isMobVal ? \"150px\" : \"200px\"}`,\n          }}\n        ></div>\n        <div\n          className={`container font-style-lobster ${\n            isMobVal ? \"container_mobile\" : \"\"\n          }`}\n        >\n          <ol className={`${isMobVal ? \"ol_mobile\" : \"ol\"}`}>\n            <li>It works only for Gmail Users (Free / Premium).</li>\n            <li>\n              Gmail Sharable Link works only if another person there in Mail\n              thread.\n            </li>\n            <li>This page will not store any of your data.</li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { TextField } from \"final-form-material-ui\";\nimport { Paper, Grid, Button, CssBaseline } from \"@material-ui/core\";\nimport \"./index.css\";\nimport { isMobile } from \"../index\";\nimport EmailInstructions from \"./EmailInstructions\";\n\nexport default class EmailLink extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageId: null,\n      submitAction: false,\n    };\n  }\n\n  getSharableLink = () => {\n    const { messageId } = this.state;\n    const sharableLink = messageId\n      ? `https://mail.google.com/mail/u/0/#search/rfc822msgid%3A${encodeURIComponent(\n          messageId.trim()\n        )}`\n      : null;\n\n    return sharableLink;\n  };\n\n  validate = (values) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email =\n        \"Message ID: Email body > 3-dot Menu > Show Original > Copy Message-ID\";\n    }\n    return errors;\n  };\n\n  onSubmit = async (values) => {\n    console.log(values);\n  };\n\n  copyMailText = () => {\n    let mailText = document.getElementById(\"generatedURL\").value;\n\n    if (mailText !== \"\") {\n      document.getElementById(\"generatedURL\").select();\n      document.execCommand(\"Copy\");\n      this.setState({ copySuccess: \"Copied!\" });\n    }\n  };\n\n  handleChange = (event) => {\n    const msgId = event.target.value;\n    const { messageId } = this.state;\n\n    if (msgId !== messageId) {\n      this.setState({ messageId: msgId.trim(), submitAction: false });\n    }\n  };\n\n  openMailLink = () => {\n    let mailText = document.getElementById(\"generatedURL\").value;\n\n    if (!!mailText) {\n      window.open(mailText);\n    }\n  };\n\n  render() {\n    const { messageId, submitAction } = this.state;\n    const isMobileValue = isMobile();\n\n    return (\n      <div className={`${isMobileValue ? \"col-flex\" : \"row-flex\"}`}>\n        <div className=\"mail-comp-page\">\n          <CssBaseline />\n          <Form\n            onSubmit={() => {}}\n            validate={this.validate}\n            render={({ handleSubmit, form, submitting, pristine, values }) => (\n              <form\n                onSubmit={handleSubmit}\n                onChange={(props) => {\n                  this.handleChange(props);\n                }}\n              >\n                <Paper\n                  style={{\n                    padding: 16,\n                    width: isMobileValue ? \"\" : \"600px\",\n                  }}\n                >\n                  <Grid container spacing={2}>\n                    <Grid container item alignItems=\"flex-start\" xs={12}>\n                      <Field\n                        name=\"email\"\n                        fullWidth\n                        required\n                        component={TextField}\n                        type=\"text\"\n                        label=\"Message ID\"\n                        autoComplete=\"off\"\n                      />\n                    </Grid>\n                    <Grid className=\"display-flex\" item alignItems=\"flex-end\">\n                      <Button\n                        onClick={() => {\n                          const { email: messageId } = values;\n                          this.setState({\n                            messageId,\n                            submitAction: true,\n                            copySuccess: \"\",\n                          });\n                        }}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={submitting || pristine}\n                      >\n                        Submit\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          form.reset();\n                          this.setState({ submitAction: false });\n                        }}\n                        variant=\"contained\"\n                        className=\"padding-left-lg\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={!messageId || pristine}\n                        style={{\n                          marginLeft: isMobileValue ? \"10px\" : \"15px\",\n                        }}\n                      >\n                        Clear\n                      </Button>\n                    </Grid>\n                    {/* Instructions show */}\n                    {!submitAction && !isMobileValue && (\n                      <Grid\n                        container\n                        spacing={2}\n                        style={{ padding: 8, fontFamily: \"monospace\" }}\n                        className=\"color-dark-gray\"\n                      >\n                        <span className=\"italic padding-left-10 user-instructions\">\n                          Please follow the Instructions below &nbsp;\n                          <span role=\"img\" aria-label=\"arrow\">\n                            ðŸ‘‡\n                          </span>\n                        </span>\n                        <span>\n                          <ul\n                            style={{\n                              listStyleType: \"disc\",\n                            }}\n                          >\n                            <li>It works only for Gmail Free/Premium Users.</li>\n                            <li>\n                              Gmail Sharable Link works only if another person\n                              there in Mail thread.\n                            </li>\n                            <li>This page will not store any of your data.</li>\n                          </ul>\n                        </span>\n                      </Grid>\n                    )}\n                    {/* Response Stage */}\n                    {messageId && submitAction && !pristine && (\n                      <Grid container spacing={2} style={{ padding: 8 }}>\n                        <Grid item alignItems=\"flex-start\" xs={12}>\n                          <Field\n                            name=\"result\"\n                            id=\"generatedURL\"\n                            fullWidth\n                            component={TextField}\n                            type=\"text\"\n                            defaultValue={this.getSharableLink()}\n                            label=\"Sharable Link\"\n                            autoComplete=\"off\"\n                          />\n                        </Grid>\n                        <Grid item alignItems=\"flex-end\">\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            onClick={this.copyMailText}\n                          >\n                            Copy\n                          </Button>\n                          {!isMobileValue && (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              type=\"submit\"\n                              style={{\n                                marginLeft: isMobileValue ? \"10px\" : \"15px\",\n                              }}\n                              onClick={this.openMailLink}\n                            >\n                              Open Mail Link\n                            </Button>\n                          )}\n                          {this.state.copySuccess ? (\n                            <div\n                              className=\"left-padding\"\n                              style={{ color: \"green\" }}\n                            >\n                              Copied!\n                            </div>\n                          ) : null}\n                        </Grid>\n                      </Grid>\n                    )}\n                  </Grid>\n                </Paper>\n              </form>\n            )}\n          />\n        </div>\n        <EmailInstructions />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { isMobile } from \"../index\";\n\nexport default class AdComponent extends React.Component {\n  returnAdsense = () => {\n    return (\n      <span>\n        <script\n          async\n          src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"\n        ></script>\n        <ins\n          className=\"adsbygoogle\"\n          style={{ display: \"block\" }}\n          data-ad-client=\"ca-pub-8510549292628710\"\n          data-ad-slot=\"8485434580\"\n          data-ad-format=\"auto\"\n        ></ins>\n        <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>\n      </span>\n    );\n  };\n\n  render() {\n    const isMobileStatus = isMobile();\n\n    return (\n      <div\n        className={`add_panel ${\n          isMobileStatus ? \"add_panel-mob\" : \"add_panel-web\"\n        }`}\n      >\n        {this.returnAdsense()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport EmailComponent from \"./Email\";\nimport AdComponent from \"./Ads\";\nimport \"./index.css\";\n\nexport const isMobile = () => {\n  if (window.innerWidth <= 760) {\n    return true;\n  }\n  return false;\n};\n\nexport default class MailComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"mail-comp-sec\">\n        <EmailComponent />\n        <AdComponent />\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Jumbotron, Navbar, NavbarBrand } from \"reactstrap\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport MailComponent from \"./components\";\nimport logo from \"./images/gmailLogo.ico\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { canSubmit: false };\n  }\n\n  disableButton() {\n    this.setState({ canSubmit: false });\n  }\n\n  enableButton() {\n    this.setState({ canSubmit: true });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Navbar dark color=\"primary\">\n          <div className=\"header\">\n            <NavbarBrand href=\"https://gmaillink.github.io/\">\n              <img\n                className=\"homepage_logo\"\n                src={logo}\n                alt=\"\"\n                height=\"30px\"\n                width=\"30px\"\n              />\n              Gmail Sharable Link Creator\n            </NavbarBrand>\n          </div>\n        </Navbar>\n\n        <Jumbotron\n          style={{ marginBottom: 0, height: \"95vh\" }}\n          className=\"mail-comp\"\n        >\n          <MailComponent />\n        </Jumbotron>\n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}